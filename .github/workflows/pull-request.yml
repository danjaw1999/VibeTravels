name: Pull Request Validation

on:
  pull_request:
    branches: [main]
  workflow_dispatch: # Allows manual triggering

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      node-version: ${{ steps.nvmrc.outputs.node-version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read .nvmrc
        id: nvmrc
        run: echo "node-version=$(cat .nvmrc)" >> $GITHUB_OUTPUT

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

  unit-test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [setup, lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Run unit tests with coverage
        run: npm run test:coverage

      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-coverage
          path: coverage/
          retention-days: 7

  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [setup, lint]
    environment: integration
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Prepare Playwright directories
        run: mkdir -p playwright/.auth

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          E2E_USERNAME_ID: ${{ secrets.E2E_USERNAME_ID }}
          E2E_USERNAME: ${{ secrets.E2E_USERNAME }}
          E2E_PASSWORD: ${{ secrets.E2E_PASSWORD }}
          CI: true

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: |
            playwright/test-results/
            playwright/report/
          retention-days: 7

  status-comment:
    name: PR Status Comment
    runs-on: ubuntu-latest
    needs: [lint, unit-test, e2e-test]
    if: always()
    steps:
      - name: Check previous job status
        id: check-status
        run: |
          if [ "${{ needs.lint.result }}" != "success" ] || [ "${{ needs.unit-test.result }}" != "success" ] || [ "${{ needs.e2e-test.result }}" != "success" ]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=❌ CI validation failed. Please check the workflow logs for details." >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=✅ All CI checks passed! The PR is ready for review." >> $GITHUB_OUTPUT
          fi

      - name: Create or update PR comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { issue, repo } = context;
            const message = `## VibeTravels CI Status

            **Build Status**: ${{ steps.check-status.outputs.status == 'success' && '✅ Success' || '❌ Failed' }}

            ${{ steps.check-status.outputs.message }}

            ### Job Summary:
            - Lint: ${{ needs.lint.result }}
            - Unit Tests: ${{ needs.unit-test.result }}
            - E2E Tests: ${{ needs.e2e-test.result }}

            [View detailed workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;

            const { data: comments } = await github.rest.issues.listComments({
              ...repo,
              issue_number: issue.number,
            });

            // Look for an existing comment from the bot
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('VibeTravels CI Status')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                ...repo,
                comment_id: botComment.id,
                body: message
              });
            } else {
              await github.rest.issues.createComment({
                ...repo,
                issue_number: issue.number,
                body: message
              });
            }
