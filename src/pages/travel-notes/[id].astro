---
import Layout from '@/layouts/Layout.astro';
import { AuthService } from '@/lib/services/auth.service';
import { TravelNoteService } from '@/lib/services/travel-note.service';
import { AttractionSuggestions } from '@/components/AttractionSuggestions';
import type { TravelNoteDTO } from '@/types';

const { id } = Astro.params;
if (!id) {
  return Astro.redirect('/404');
}

const authService = new AuthService();
const user = await authService.getUser(Astro.locals.supabase);
const service = new TravelNoteService(Astro.locals.supabase);

let travelNote: TravelNoteDTO;
try {
  const note = await service.getTravelNoteById(id);
  if (!note) {
    return Astro.redirect('/404');
  }

  // Check if user has access to private note
  if (!note.is_public && (!user || user.id !== note.user_id)) {
    return Astro.redirect('/403');
  }

  travelNote = note;
} catch (err) {
  console.error('Error fetching travel note:', err);
  return Astro.redirect('/404');
}

// Format date for display
const formattedDate = new Date(travelNote.created_at).toLocaleDateString('en-US', {
  year: 'numeric',
  month: 'long',
  day: 'numeric'
});

// Check if user is the owner
const isOwner = user?.id === travelNote.user_id;

// Serializuj travelNote do JSON dla skryptu
const serializedTravelNote = JSON.stringify(travelNote);
---

<Layout title={travelNote.name}>
  <main class="container mx-auto px-4 py-8" role="main">
    <nav class="mb-8" role="navigation" aria-label="Breadcrumb">
      <ol class="flex items-center space-x-2 text-sm">
        <li>
          <a href="/travel-notes" class="text-primary hover:underline">Travel Notes</a>
        </li>
        <li class="text-muted-foreground">/</li>
        <li class="text-muted-foreground truncate">{travelNote.name}</li>
      </ol>
    </nav>

    <article class="prose prose-lg dark:prose-invert max-w-none">
      <header class="mb-8">
        <h1 class="text-4xl font-bold mb-4">{travelNote.name}</h1>
        <div class="flex items-center gap-4 text-sm text-muted-foreground">
          <time datetime={travelNote.created_at}>{formattedDate}</time>
          {travelNote.is_public ? (
            <span class="bg-primary/10 text-primary px-2 py-1 rounded-full">Public</span>
          ) : (
            <span class="bg-muted text-muted-foreground px-2 py-1 rounded-full">Private</span>
          )}
        </div>
      </header>

      <div class="mb-12 whitespace-pre-wrap">{travelNote.description}</div>

      {travelNote.attractions.length > 0 ? (
        <section aria-labelledby="attractions-heading">
          <h2 id="attractions-heading" class="text-2xl font-semibold mb-6">Attractions</h2>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            {travelNote.attractions.map((attraction) => (
              <div class="bg-card rounded-lg shadow-md p-6">
                <h3 class="text-xl font-semibold mb-2">{attraction.name}</h3>
                {attraction.image && (
                  <div class="relative aspect-video mb-4 rounded-lg overflow-hidden">
                    <img 
                      src={attraction.image.url} 
                      alt={`Photo of ${attraction.name}`}
                      class="object-cover w-full h-full"
                    />
                    <div class="absolute bottom-0 right-0 bg-black/50 text-white text-xs p-2">
                      Photo by{' '}
                      <a 
                        href={attraction.image.photographerUrl}
                        target="_blank"
                        rel="noopener noreferrer"
                        class="hover:underline"
                      >
                        {attraction.image.photographer}
                      </a>
                    </div>
                  </div>
                )}
                {attraction.description && (
                  <p class="text-muted-foreground mb-4">{attraction.description}</p>
                )}
                <div class="flex items-center gap-2 text-sm text-muted-foreground">
                  <a
                    href={`https://www.google.com/maps?q=${attraction.latitude},${attraction.longitude}`}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="hover:underline flex items-center gap-1"
                  >
                    <span>View on map</span>
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                    </svg>
                  </a>
                </div>
              </div>
            ))}
          </div>
        </section>
      ) : isOwner && (
        <section aria-labelledby="suggestions-heading" class="mb-12">
          <h2 id="suggestions-heading" class="text-2xl font-semibold mb-6">Suggested Attractions</h2>
          <AttractionSuggestions 
            client:idle 
            travelNote={travelNote}
          />
        </section>
      )}

      {isOwner && (
        <div class="mt-8 flex gap-4">
          <a 
            href={`/travel-notes/${travelNote.id}/edit`}
            class="bg-primary text-white px-4 py-2 rounded-lg hover:bg-primary/90 transition-colors"
          >
            Edit Note
          </a>
          <button 
            type="button"
            class="bg-destructive text-destructive-foreground px-4 py-2 rounded-lg hover:bg-destructive/90 transition-colors"
            onclick="if(confirm('Are you sure you want to delete this note?')) location.href=`/api/travel-notes/${travelNote.id}/delete`"
          >
            Delete Note
          </button>
        </div>
      )}
    </article>
  </main>
</Layout> 